public class TestHarness {
    public TestHarness() {//plain constructor - cody
        testItemClass();//this testharness class is testing the Item class-cody
        testRoomClass();
    }
    //method to test Item class -cody
    public void testItemClass(){
        System.out.println("Testing the Item class"); // default message to inform what its about-cody
        Item i1 = new Item ("", "", true);
        if (i1 != null) {//get method testers and print outs -cody
            System.out.println(i1.getName());
            System.out.println(i1.getDescription());
            System.out.println(i1.isCollectible());
        }else
            System.out.println("There was an error creating the item");// message if it was a false test-cody
        i1.setName("bat");//call set commands-cody
        i1.setDescription("old and brown");
        i1.setCollectible(true);
        System.out.println(i1.toString());// once getters and setters run with
        // no errors to command prints name,description, collectible (true)
        }//copied the test harness almost exact down here for the room
    public void testRoomClass(){
        System.out.println("Testing the Room class");
        Room r1 = new Room("Attic", "Dark", 1);
        if (r1 != null){
            System.out.println(r1.getName());
            System.out.println(r1.getDescription());
            System.out.println(r1.getId());
        }else{
            System.out.println("There was an error creating the room");// message if it was a false test-cody
        r1.setName("Attic");//call set commands-cody
        r1.setDescription("dark and cold");
        r1.setId(1);
        System.out.println(r1.toString());// once getters and setters run with
        // no errors to command prints name,description, room id
    }
}}
